<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Management System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- SweetAlert2 CSS -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #f8fafc;
            --accent-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
        }   

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .main-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            margin: 2rem 0;
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), #3b82f6);
            color: white;
            padding: 2rem;
            text-align: center;
            position: relative;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="40" r="1.5" fill="rgba(255,255,255,0.1)"/><circle cx="40" cy="80" r="1" fill="rgba(255,255,255,0.1)"/></svg>');
        }

        .header h1 {
            position: relative;
            z-index: 1;
            margin: 0;
            font-weight: 700;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-icon {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        .form-section {
            background: white;
            margin: 2rem 0;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .form-floating > label {
            color: #6b7280;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), #3b82f6);
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(37, 99, 235, 0.4);
        }

        .table-container {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .table th {
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            border: none;
            padding: 1rem;
            font-weight: 600;
            color: #374151;
        }

        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-color: #f1f5f9;
        }

        .student-row {
            transition: background-color 0.2s ease;
        }

        .student-row:hover {
            background-color: #f8fafc;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
        }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            font-size: 0.85rem;
        }

        .search-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .search-input {
            padding-left: 3rem;
            border-radius: 10px;
            border: 2px solid #e2e8f0;
            transition: border-color 0.3s ease;
        }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }

        .grade-badge {
            display: inline-block;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .grade-a { background-color: #dcfce7; color: #166534; }
        .grade-b { background-color: #dbeafe; color: #1d4ed8; }
        .grade-c { background-color: #fef3c7; color: #92400e; }
        .grade-d { background-color: #fecaca; color: #991b1b; }

        .modal-content {
            border-radius: 15px;
            border: none;
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), #3b82f6);
            color: white;
            border-radius: 15px 15px 0 0;
        }

        @media (max-width: 768px) {
            .stats-cards {
                grid-template-columns: 1fr 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .table-responsive {
                font-size: 0.9rem;
            }
        }
       .errMessage {
            color: var(--danger-color); /* or use red directly */
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-container">
            <!-- Header -->
            <div class="header">
                <h1><i class="fas fa-graduation-cap me-3"></i>Student Management System</h1>
                <p class="mb-0">Manage your students efficiently and effectively</p>
            </div>

            <div class="container-fluid p-4">
                <!-- Statistics Cards -->
                

                <!-- Add Student Form -->
                <div class="form-section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3><i class="fas fa-user-plus me-2"></i>Add New Student</h3>
                        <button class="btn btn-outline-primary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#addStudentForm">
                            <i class="fas fa-plus"></i> Add Student
                        </button>
                    </div>
                    
                    <div class="collapse" id="addStudentForm">
                      <form id="studentForm" novalidate>
                            <div class="row g-3">
                                <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="studentName" placeholder="Student Name" required />
                                    <label for="studentName">Full Name</label>
                                    <p id="error-name" class="errMessage"></p>
                                </div>
                                </div>

                                <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="email" class="form-control" id="studentEmail" placeholder="Email" required />
                                    <label for="studentEmail">Email Address</label>
                                    <p id="error-email" class="errMessage"></p>
                                </div>
                                </div>

                                <div class="col-md-4">
                                <div class="form-floating">
                                    <input type="tel" class="form-control" id="studentPhone" placeholder="Phone" />
                                    <label for="studentPhone">Phone Number</label>
                                    <p id="error-phone" class="errMessage"></p>
                                </div>
                                </div>

                                <div class="col-md-4">
                                <div class="form-floating">
                                    <select class="form-select" id="studentGrade" required>
                                             <option value="">Select Grade</option>
                                    <option value="A">A - Excellent</option>
                                    <option value="B">B - Good</option>
                                    <option value="C">C - Average</option>
                                    <option value="D">D - Below Average</option>
                                    </select>
                                    <label for="studentGrade">Grade</label>
                                    <p id="erorgrade" class="errMessage"></p>
                                </div>
                                </div>

                                <div class="col-md-4">
                                <div class="form-floating">
                                    <select class="form-select" id="studentCourse" required>
                                         <option value="">Select Course</option>
                                    <option value="Computer Engineering">Computer Engineering</option>
                                    <option value="Mechanical Engineering">Mechanical Engineering</option>
                                    <option value="Electrical Engineering">Electrical Engineering</option>
                                    <option value="Civil Engineering">Civil Engineering</option>
                                    <option value="Electronics & Communication">Electronics & Communication</option>
                                    <option value="Information Technology">Information Technology</option>
                                    <option value="Chemical Engineering">Chemical Engineering</option>
                                    <option value="Architecture">Architecture</option>
                                    </select>
                                    <label for="studentCourse">Course</label>
                                    <p id="erorcourse" class="errMessage"></p>
                                </div>
                                </div>

                                <div class="col-12">
                                <button type="submit" class="btn btn-primary" id="FormSubmit">
                                    <i class="fas fa-save me-2"></i>Add Student
                                </button>
                                <button type="button" class="btn btn-outline-secondary ms-2" data-bs-toggle="collapse" data-bs-target="#addStudentForm">
                                    Cancel
                                </button>
                                </div>
                            </div>
                            </form>
                    </div>
                </div>

                <!-- Student List -->
                <div class="table-container">
                    <div class="p-3 border-bottom">
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <h3 class="mb-0"><i class="fas fa-list me-2"></i>Student List</h3>
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="form-control search-input" id="searchStudent" placeholder="Search students...">
                            </div>
                        </div>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Course</th>
                                    <th>Grade</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                           <tbody id="studentsTableBody">
                        <% if(students && students.length > 0) { %>
                            <% students.forEach((student, index) => { %>
                                <tr class="student-row">
                                    <td class="text-center fw-bold text-primary">
                                        <%= index + 1 %>
                                    </td>
                                    <td class="student-name">
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-circle me-2">
                                               
                                            </div>
                                            <span class="fw-medium"><%= student.name %></span>
                                        </div>
                                    </td>
                                    <td class="student-email">
                                        <i class="fas fa-envelope text-muted me-1"></i>
                                        <%= student.email %>
                                    </td>
                                    <td class="student-phone">
                                        <% if(student.phone && student.phone !== 'null' && student.phone !== '') { %>
                                            <i class="fas fa-phone text-muted me-1"></i>
                                            <%= student.phone %>
                                        <% } else { %>
                                            <span class="text-muted fst-italic">Not provided</span>
                                        <% } %>
                                    </td>
                                    <td class="student-course">
                                        <span class="course-badge">
                                            <%= student.course %>
                                        </span>
                                    </td>
                                    <td class="student-grade">
                                        <span class="grade-badge grade-<%= student.grade.toLowerCase() %>">
                                            <i class="fas fa-medal me-1"></i>
                                            <%= student.grade %>
                                        </span>
                                    </td>
                                    <td class="action-buttons">
                                        <div class="btn-group" role="group">
                                            <button
                                                class="btn btn-sm btn-outline-primary edit-btn"
                                                data-id="<%= student._id || student.id %>"
                                                data-name="<%= student.name %>"
                                                data-email="<%= student.email %>"
                                                data-phone="<%= student.phone || '' %>"
                                                data-grade="<%= student.grade %>"
                                                data-course="<%= student.course %>"
                                                title="Edit Student">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button 
                                                class="btn btn-sm btn-outline-info view-btn" 
                                                onclick="View('<%= student.id %>')" 
                                                data-id="<%= student._id || student.id %>"
                                                title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button 
                                                class="btn btn-sm btn-outline-danger delete-btn" 
                                                onclick="DeleteId(event,'<%=student.id %>')" 
                                                data-id="<%= student._id || student.id %>"
                                                title="Delete Student">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr class="no-data-row">
                                <td colspan="7" class="text-center py-5">
                                    <div class="no-data-message">
                                        <i class="fas fa-user-slash fa-3x text-muted mb-3"></i>
                                        <h5 class="text-muted">No Students Found</h5>
                                        <p class="text-muted mb-0">There are no students to display at the moment.</p>
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>

                            </tbody>
                        </table>
                    </div>
                    
                    <div id="noStudentsMessage" class="text-center py-5" style="display: none;">
                        <i class="fas fa-users-slash fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No students found</h5>
                        <p class="text-muted">Add your first student to get started!</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
  <div class="modal fade" id="editModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content rounded-4 shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title"><i class="fas fa-edit me-2"></i>Edit Student</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editStudentForm" novalidate>
                        <input type="hidden" id="editStudentId">
                        
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="editStudentName" required>
                            <label>Full Name</label>
                            <p class="errMessage" id="error-name"></p>
                        </div>
                        
                        <div class="form-floating mb-3">
                            <input type="email" class="form-control" id="editStudentEmail" required>
                            <label>Email Address</label>
                            <p class="errMessage" id="error-email"></p>
                        </div>
                        
                        <div class="form-floating mb-3">
                            <input type="tel" class="form-control" id="editStudentPhone">
                            <label>Phone Number (Optional)</label>
                            <p class="errMessage" id="error-phone"></p>
                        </div>
                        
                        <div class="row g-2">
                            <div class="col-6">
                                <div class="form-floating">
                                    <select class="form-select" id="editStudentGrade" required>
                                        <option value="">Select Grade</option>
                                        <option value="A">A - Excellent</option>
                                        <option value="B">B - Good</option>
                                        <option value="C">C - Average</option>
                                        <option value="D">D - Below Average</option>
                                    </select>
                                    <label>Grade</label>
                                    <p class="errMessage" id="error-grade"></p>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-floating">
                                    <select class="form-select" id="editStudentCourse" required>
                                        <option value="">Select Course</option>
                                        <option value="Computer Engineering">Computer Engineering</option>
                                        <option value="Mechanical Engineering">Mechanical Engineering</option>
                                        <option value="Electrical Engineering">Electrical Engineering</option>
                                        <option value="Civil Engineering">Civil Engineering</option>
                                        <option value="Electronics & Communication">Electronics & Communication</option>
                                        <option value="Information Technology">Information Technology</option>
                                        <option value="Chemical Engineering">Chemical Engineering</option>
                                        <option value="Architecture">Architecture</option>
                                    </select>
                                    <label>Course</label>
                                    <p class="errMessage" id="error-course"></p>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveEditBtn">
                        <i class="fas fa-save me-2"></i>Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
 // ===========================
// UTILITY FUNCTIONS
// ===========================

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// ===========================
// ERROR HANDLING FUNCTIONS
// ===========================

// Show error message & add error class
function showError(fieldId, message) {
  const errorElement = document.getElementById(`error-${fieldId.toLowerCase()}`);
  const inputElement = document.getElementById(`student${capitalizeFirstLetter(fieldId)}`);

  if (errorElement) errorElement.textContent = message;
  if (inputElement) {
    inputElement.classList.add('error');
    inputElement.classList.remove('success');
  }
}

// Clear error message & add success class
function clearError(fieldId) {
  const errorElement = document.getElementById(`error-${fieldId.toLowerCase()}`);
  const inputElement = document.getElementById(`student${capitalizeFirstLetter(fieldId)}`);

  if (errorElement) errorElement.textContent = '';
  if (inputElement) {
    inputElement.classList.remove('error');
    inputElement.classList.add('success');
  }
}

// Clear all errors & input styles
function clearAllErrors() {
  const errorElements = document.querySelectorAll('.errMessage');
  const inputs = document.querySelectorAll('input, select');

  errorElements.forEach(el => (el.textContent = ''));
  inputs.forEach(input => {
    input.classList.remove('error', 'success');
  });
}

// ===========================
// VALIDATION FUNCTIONS
// ===========================

function validateName(name) {
  if (!name.trim()) return 'Name is required';
  if (name.trim().length < 2) return 'Name must be at least 2 characters long';
  return null;
}

function validateEmail(email) {
  if (!email.trim()) return 'Email is required';
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) return 'Please enter a valid email address';
  return null;
}

function validatePhone(phone) {
  if (!phone.trim()) return null; // optional phone
  const phoneRegex = /^\+?[\d\s\-\(\)]+$/;
  if (!phoneRegex.test(phone) || phone.replace(/\D/g, '').length < 10) return 'Please enter a valid phone number';
  return null;
}

function validateGrade(grade){
    if(grade === "") return `grade is required `
    return null 
}
// ===========================
// TOAST NOTIFICATION FUNCTIONS
// ===========================

let currentToast;

function SuccessMessage(msg) {
  if (currentToast) currentToast.close();

  currentToast = Swal.fire({
    icon: 'success',
    title: msg,
    toast: true,
    position: 'top-end',
    timer: 3000,
    showConfirmButton: false,
    timerProgressBar: true,
    background: '#d4edda',
    color: '#155724',
    iconColor: '#28a745',
    customClass: {
      popup: 'swal-toast'
    },
    didOpen: (toast) => {
      toast.style.zIndex = '9999';
      toast.style.borderRadius = '8px';
      toast.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
      toast.style.borderLeft = '4px solid #28a745';
    },
    willClose: () => { currentToast = null; }
  });
  
  currentToast.then(() => {
    window.location.reload();  // Reload page after the toast
  });
}

function FailureMessage(msg) {
  if (currentToast) currentToast.close();

  currentToast = Swal.fire({
    icon: 'warning',
    title: msg,
    toast: true,
    position: 'top-end',
    timer: 3000,
    showConfirmButton: false,
    timerProgressBar: true,
    background: '#fff3cd',
    color: '#856404',
    iconColor: '#ffc107',
    customClass: {
      popup: 'swal-toast'
    },
    didOpen: (toast) => {
      toast.style.zIndex = '9999';
      toast.style.borderRadius = '8px';
      toast.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
      toast.style.borderLeft = '4px solid #ffc107';
    },
    willClose: () => { currentToast = null; }
  });
}

// ===========================
// ADD STUDENT FORM HANDLING
// ===========================

// Real-time validation for add form
['Name', 'Email', 'Phone','Grade','Course'].forEach(field => {
  const input = document.getElementById(`student${field}`);
  if (input) {
    input.addEventListener('blur', function () {
      let error = null;
      if (field === 'Name') error = validateName(this.value);
      else if (field === 'Email') error = validateEmail(this.value);
      else if (field === 'Phone') error = validatePhone(this.value);
      else if(field === 'Grade') error=v
      if (error) showError(field.toLowerCase(), error);
      else clearError(field.toLowerCase());
    });
  }
});

// Add student form submission
document.getElementById('studentForm').addEventListener('submit', async function (e) {
  e.preventDefault();
  clearAllErrors();

  const name = document.getElementById('studentName').value.trim();
  const email = document.getElementById('studentEmail').value.trim();
  const phone = document.getElementById('studentPhone').value.trim();
  const grade = document.getElementById('studentGrade').value;
  const course = document.getElementById('studentCourse').value;

  // Validate all fields
  const nameError = validateName(name);
  const emailError = validateEmail(email);
  const phoneError = validatePhone(phone);

  let hasErrors = false;
  if (nameError) {
    showError('name', nameError);
    hasErrors = true;
  }
  if (emailError) {
    showError('email', emailError);
    hasErrors = true;
  }
  if (phoneError) {
    showError('phone', phoneError);
    hasErrors = true;
  }

  if (hasErrors) return; // stop submission
  
  const formData = { name, email, phone, grade, course }
  
  try {
    const response = await fetch('/', { 
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    });

    if (!response.ok) throw new Error('Failed to submit form');
   
    const result = await response.json();
    console.log(result)
    
    if(result.success){
      SuccessMessage(`Student created successfully`)
      this.reset();
      clearAllErrors();
    }
    else{
      FailureMessage(`Something went wrong`)
    }

  } catch (error) {
    console.error('Error:', error);
    FailureMessage('There was an error submitting the form.')
  }
});

// ===========================
// EDIT STUDENT MODAL HANDLING
// ===========================

// Handle edit button click to populate modal
const editButtons2 = document.querySelectorAll('.edit-btn');
const editModal2 = new bootstrap.Modal(document.getElementById('editModal'));

editButtons2.forEach(button => {
  button.addEventListener('click', () => {
    // Get data attributes from the button
    const id = button.dataset.id;
    const name = button.dataset.name;
    const email = button.dataset.email;
    const phone = button.dataset.phone;
    const grade = button.dataset.grade;
    const course = button.dataset.course;

    // Fill the modal inputs
    document.getElementById('editStudentId').value = id;
    document.getElementById('editStudentName').value = name;
    document.getElementById('editStudentEmail').value = email;
    document.getElementById('editStudentPhone').value = phone;
    document.getElementById('editStudentGrade').value = grade;
    document.getElementById('editStudentCourse').value = course;

    // Show the modal
    editModal2.show();
  });
});

// ===========================
// EDIT FORM VALIDATION & SUBMISSION
// ===========================

// Single function for edit form validation and submission
document.getElementById('saveEditBtn').addEventListener('click', async function() {
  // Clear previous errors
  document.querySelectorAll('.errMessage').forEach(el => el.textContent = '');
  document.querySelectorAll('.form-control, .form-select').forEach(el => el.classList.remove('is-invalid'));
  
  // Get form values
  const name = document.getElementById('editStudentName').value.trim();
  const email = document.getElementById('editStudentEmail').value.trim();
  const phone = document.getElementById('editStudentPhone').value.trim();
  const grade = document.getElementById('editStudentGrade').value;
  const course = document.getElementById('editStudentCourse').value;
  
  let isValid = true;
  
  // Validate using existing validation functions
  const nameError = validateName(name);
  const emailError = validateEmail(email);
  const phoneError = validatePhone(phone);
  
  // Show errors
  if (nameError) {
    document.getElementById('editStudentName').classList.add('is-invalid');
    document.getElementById('error-name').textContent = nameError;
    isValid = false;
  }
  
  if (emailError) {
    document.getElementById('editStudentEmail').classList.add('is-invalid');
    document.getElementById('error-email').textContent = emailError;
    isValid = false;
  }
  
  if (phoneError) {
    document.getElementById('editStudentPhone').classList.add('is-invalid');
    document.getElementById('error-phone').textContent = phoneError;
    isValid = false;
  }
  
  if (!grade) {
    document.getElementById('editStudentGrade').classList.add('is-invalid');
    document.getElementById('error-grade').textContent = 'Please select a grade';
    isValid = false;
  }
  
  if (!course) {
    document.getElementById('editStudentCourse').classList.add('is-invalid');
    document.getElementById('error-course').textContent = 'Please select a course';
    isValid = false;
  }
  
  // If validation fails, stop here
  if (!isValid) return;
  
  // If validation passes, submit to backend
  const studentId = document.getElementById('editStudentId').value;
  const formData = { name, email, phone, grade, course };
  
  try {
    // Show loading state
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
    
    // Send to backend
    const response = await fetch(`/students/${studentId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    
    if (response.ok) {
      // Success - close modal and show success message
      bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
      SuccessMessage('Student updated successfully!');
    } else {
      FailureMessage('Try other email');
    }
  } catch (error) {
    FailureMessage('Error: ' + error.message);
  } finally {
    // Reset button state
    this.disabled = false;
    this.innerHTML = '<i class="fas fa-save me-2"></i>Save Changes';
  }
});

// ===========================
// DELETE STUDENT FUNCTION
// ===========================

async function DeleteId(event, id) {
  event.preventDefault();
  console.log(id)
  
  // Show SweetAlert2 confirmation dialog
  const result = await Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'No, keep it',
    reverseButtons: true
  });

  // If user clicks "Yes, delete it!"
  if (result.isConfirmed) {
    try {
      // Make a DELETE request to the server
      const response = await fetch(`/delete/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      // Check if the request was successful
      if (!response.ok) {
        throw new Error('Failed to delete the student');
      }

      // Remove the student from the DOM after successful deletion
      const button = event.target.closest('button');
      button.closest('tr').remove();
      SuccessMessage(`Student deleted successfully`)
      
    } catch (error) {
      FailureMessage(`Server error occurred`)
    }
  } else {
    // If user cancels
    FailureMessage(`Operation cancelled`)
  }
}


function View(id){
    window.location.href =`/view/${id}`
}
</script>

   
</body>
</html>
